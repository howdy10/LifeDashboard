export const answers = [
  {
    category: "Excitment",
    title: "Excited about processing service",
    told: true,
    story: [
      "When I was starting my career at GM, I was working on a team tasked with rewriting a web application. One of the main components of this rewrite was the development of a data processing service responsible for handling all user entries into the application, which averaged around 30,000 entries per day. This application was used to get the closest possible to purchasing a vehicle online.",
      "For each entry a series of steps needed to be completed such as sending emails to customers and dealers, as well as making calls to external APIs to retrieve coupon codes from manufacturers. I was excited to work on this since I knew it was a very important part of how the application works.",
      "My approach was to understand what the existing solution was and identify any pain points. This helped me envision how this service could be improved for this rewrite. I was very excited to be working on this since it was my first big project as a junior developer, and I knew that this app and process would be customer facing and would directly impact normal users. With time I was able to deliver the processing service and it was great seeing it run seamlessly in production.",
    ],
  },
  {
    category: "Worker not pulling weight",
    title: "Carsten",
    told: true,
    story: [
      "During my time at Deloitte, I was in a situation where a co-worker responsible for back-end API development consistently fell behind on their assigned work, which was causing delays in our project. Since front end features were being completed but had no actual backend to call, our client demos were being made with mock data. My role was front end development and leading client demos.",
      "I initially reached out to the developer to try to understand the reasons for the delays. He reassured me that he was working on it, but I noticed that there was no actual progress. Realizing the impact on our project, I decided to schedule a group meeting with our manager to address the issue.",
      "In the meeting, the developer shared the challenges he was facing, which included a mix of large stories and commitments to a different team which we didn’t know about. Together, we reviewed the workload and broke it down into more manageable tasks that could be completed within a sprint. With better stories I was able to incorporate some of the workload into my sprint. This led to significantly faster development, and back-end development was able to catch up with front-end development, ensuring that every new feature had a full end-to-end functionality demo for our client.",
      "As a result, our project progressed more smoothly, we met our sprint goals consistently, and the client was satisfied with our timely deliveries. ",
    ],
  },
  {
    category: "Co-Worker dissagrement",
    title: "Angular vs React",
    told: true,
    story: [
      "While I was working at GM, our development team had a big decision to rewrite an older AngularJS application. This app needed to be rewritten since AngularJS would no longer be supported by Google and was also no longer compliant with the company's standards. We had the option between two compliant options: a newer version of Angular or React.",
      "Initially, I pushed for React, since it’s what I was more familiar with. However, another team member had a strong preference for using Angular, the rest of the team did not have a strong preference. I knew we had to choose what was best for the team so we went through a list of steps to decide.",
      "First, I created a list of all the current components in the application. As we developed this list, the team discussed potential solutions for each component, taking into consideration the solutions for both Angular and React.",
      "During these discussions, it became clear that the majority of the team had a solid understanding of Angular and felt more comfortable working with it. While I was a stronger React developer personally, I realized that the team's knowledge in Angular could lead to faster and more efficient development.",
      "With this insight, we made the decision to choose Angular. As the project went on, it became clear that the decision was the right one. The team's base understanding of Angular resulted in faster development and fewer learning curves compared to using React, where most of the team would have had to learn React on the job.",
    ],
  },
  {
    category: "Dissagreance with higher levels",
    title: "Durable function convince",
    told: true,
    story: [
      "While I was working at Valore Partners, I was working on  a data migration tool using Azure Functions, a serverless solution of Azure. During the project, I discovered a new version of Azure Functions called 'durable functions,' which extended the functionality. It provided a lot of useful out of the box functionality such as retry logic, stateful workflows, parallel computing, all built using  orchestrations. ",
      "When I decided to use these durable functions in my design, I got resistance from the lead architect. He had concerns about my choice, mostly around the belief that the rest of the team would struggle to understand the code.",
      "So I decided to meet personally with him to listen to their concerns and understand their perspective. In this conversation, I realized that their concern came from not being familiar with durable functions. They seemed to think it was similar to learning a new coding language, and it was better to self write any new features Durable functions already provided.",
      "So instead of just trying to convince them there I decided to prepare a brown-bag style presentation to teach the whole team (including the architects) on what durable functions are and how they work. ",
      "After the presentation, I followed up with the architects to see if they had changed their mind on durable functions. I reassured them that the code style does not drastically change, and explained to them how this could reduce development time by using the built in features not just for my project but for others in the future. They recognized the benefits of durable functions and how it can improve the company's projects, and I was able to use them, and now other projects were also using them when it was appropriate. ",
    ],
  },
  {
    category: "Priority changes",
    title: "Stephanie",
    told: true,
    story: [
      "While working at GM as a lead developer, I would work closely with our Research Analyst (RA) on managing our team's workload and sprint priorities. There were instances when the RA introduced new requirements mid-sprint, which called for a critical discussion.",
      "In these situations, I would meet with the RA to discuss the impact of taking on the new requirement. We discussed the priorities, evaluated our current sprint tasks, and considered the remaining sprint timeline. This collaborative approach allowed us to make informed decisions on what team would work on.",
      "We would either decide to pivot our efforts and focus on the new requirement or make appropriate arrangements to include it in the next sprint. This approach ensured that our work was completed without any tasks getting missed. With this process we knew we would be able to properly address any new requirements and continue to meet our deadlines.",
    ],
  },
  {
    category: "Missing deadlines",
    title: "SA West deplay deployment",
    told: true,
    story: [
      "While I was working at GM, I was the lead developer for a project involving the addition of new countries to our demand and forecasting planning application. The application received files for each specific country, so there were additional files that needed to be sent for these new countries, along with other special development for these new countries. There was a separate team that would send these files.",
      "As the project went on, things were going smoothly and we were implementing all the new functionality. However, as we got to the User Acceptance Testing (UAT) phase, I knew it was important to do full end-to-end testing of the entire application, including the existing functionality.",
      "The challenge came when the team responsible for the files had issues with their lower environments and were not sending the original countries' files. They argued that since the existing functionality had not been modified, there should be no issues with it. However, I knew that introducing new features could potentially impact existing functionality or the generation of reports that involved all countries, not just the new ones.",
      "During one of our team meetings, I raised this concern, emphasizing why full testing was essential. The other team attempted to downplay the importance of testing the existing functionality. I firmly explained the potential risks and the news that missing the deployment date was a high possibility, but it was necessary to ensure the reliability of our system.",
      "I made it clear that I would not provide sign-off for deployment unless proper testing was made. After many discussions, the team agreed to my request, and we proceeded with full application testing. In this testing phase we discovered and corrected several issues that would have been missed without this testing.",
      "While we did have to push back our deployment date, the delay allowed us to deliver a more reliable system. This experience showed the importance of standing up for quality and the value of full testing to minimize potential problems in production.",
    ],
  },
  {
    category: "Unfamiliar tools",
    title: "Valore Azure when not knowing it",
    told: true,
    story: [
      "When I joined Valore Partners, I was assigned to a client project to develop  a data migration tool using Azure cloud solutions that would replace an existing local DB link data migration tool. The catch was that I had hardly any experience with Azure services.",
      "I knew I would have to get up to speed with Azure if I wanted this project to be successful. I started with getting familiar with the current solution that was going to be replaced. This way I would have a good understanding of what the project's main requirements were.",
      "Next I took the initiative to learn Azure. I started by going through basic courses that introduced the services offered by Azure. This helped me identify at a high level the services I could use for the project. I then started to dive deeper into those services to get a full understanding of all the functionality they offer. I did this by self enrolling in Udemy courses and studying the documentation provided by microsoft. This helped me to get a real good understanding of Azure services. From all this self learning I was able to earn my first Azure certification.",
      "With this new knowledge of Azure, I was not only able to suggest Azure-based solutions with confidence but also successfully implement them. This approach not only ensured the project success but also highlights my dedication to professional growth.",
    ],
  },
  {
    category: "Hard bug",
    title: "Clustered index bug",
    told: true,
    story: [
      "Early in my career while I was working at GM, I was working on a queue-based system for data processing, which involved handling about 30,000 daily entries. The system was designed to pull new records from a database table and process them accordingly. After building and deploying the system to production, I tried to find ways to enhance the performance, with focusing on the database retrieval step.",
      "I then encountered the concept of a clustered index, which ideally would improve the performance of data retrieval since it orders the database records based on a key. Thinking this would be an improvement, I moved forward with the implementation. It was tested thoroughly in the lower environments to ensure it worked as intended.",
      "However, the issue came up when the change reached production. The clustered index was causing deadlocks on the table since it attempted to reorder the database records when a new entry came in. It realized that this change had not been tested for the scale of production.",
      "Recognizing my mistake, I took action to address the issue. I started the process of creating a hotfix to revert the change, so that the system could continue working as expected. This experience was a valuable lesson of why it’s important to thoroughly test changes, especially in a production-scale environment. Moving forward I’ve made the effort to test big changes within a production-scale environment. ",
    ],
  },
  {
    category: "A big mistake",
    title: "rm -f root directory",
    told: true,
    story: [
      "While I was working at GM, I was responsible for setting up the Continuous Integration/Continuous Delivery (CI/CD) pipeline for our applications. The pipeline was already set up for lower environments, and everything was running smoothly. A step in this release was to clear out a specific directory where the bash scripts lived to have a clean creation of them. This directory was set by a release variable that was set for each environment. When I was adding a step to have it deployed to production I overlooked setting this variable.",
      "When I attempted to run the first deployment to production, since the variable was not set, the rm -f command was executed on the root directory of the production server. It was a critical mistake.",
      "I realized the issue while monitoring the deployment logs, I quickly took steps to fix the situation. First, to ensure no disruption to production, I switched our production server to run on our backup server.",
      "Second, I investigated the extent of the damage. Luckily, the deployment is run with a service account that has limited access, so the damage was mostly to custom setups and configurations.",
      "Third, I worked on restoring the production server to its working state. This process involved comparing it to our backup server, and replicating any custom setups, and conducting testing to ensure everything was functioning as before.",
      "After everything, I was able to recover the production server and restore it to a working state.",
      "With this experience I learned valuable lessons. First the importance of double checking your work when involving changes in a production environment, and even how important it could be to have a second person review your changes. I also realized how important it is to have backup servers in place, that helped to minimize the impact of the mistake. While that was a challenging experience it contributed to my growth as a professional in my field. ",
    ],
  },
  ,
  {
    category: "Another mistake, plan with other",
    title: "Month-end roll demand file",
    told: true,
    story: [
      "While working at GM as part of the demand and forecasting planning team, we had a monthly process involving an inbound file of open orders that needed to be translated into demand for the previous month. The process we had focused on ensuring the import file was in our system, but it overlooked a crucial step—verifying that the file corresponded to the correct month.",
      "Unfortunately, one month during that process. I didn’t recognize that the file used was from the wrong month. As a result, we executed the month process and caused our demand for parts to be incorrect, in addition it affected the forecasting calculation.",
      "The issue was initially discovered by the business team, who noticed discrepancies in the forecast. I recognized this was a serious issue, so I took the lead to investigate the problem. I remained calmed while examining the issue, and discovered the issue was the use of the wrong data file.",
      "I quickly engaged with the business team to explain the issue and collaborate on potential solutions, discussing the trade-offs of each option. Together, we identified the best course of action. Correcting the data involved a two-day effort on my part, involving manual override of the demand data.",
      "I did understand that this issue could have been avoided with proper checks in place. To prevent similar issue in the future, I introduced some enhancements to our process:",
      "I added a step in our process documentation to verify the file's data was correct month. I then created a template of the process steps to be used to communicate with the business team so provide proper signoff of each step including our file month data check. This also included the business team to verify the month data file.",
      "These improvements helped place checks to improve our monthly process to minimize potential issues.",
    ],
  },
  {
    category: "Improving existing flow",
    title: "back-end contracts",
    told: true,
    story: [
      "When I initially joined Deloitte, I joined a project where the front-end and back-end teams worked in separate sprints. This was to ensure that the front-end team had all the necessary API endpoints from the back-end team before starting their work on a new feature. However, as I became more familiar with the team and the project, I realized there was an opportunity to improve our development process.",
      "The existing approach meant that it took two sprints to implement a new feature - one sprint for the back-end team to create the endpoints and another for the front-end team to work on their implementation. This two-sprint timeline felt inefficient and could be optimized.",
      "To address this, I proposed a new process. I suggested that when a new feature was identified, the first step should be to create a contract that the back-end team would use to develop the API endpoint. Simultaneously, the front-end team could use this contract to mock the necessary data and start working on their implementation during the same sprint as the back-end team.",
      "Implementing this new process reduced the development time for new features from two sprints to just one sprint. This optimization allowed us to deliver new features to our clients quicker.",
    ],
  },
  {
    category: "Improving process",
    title: "Processing service tool",
    told: true,
    story: [
      "While I was working at GM and in the final stages of developing a processing service tool capable of handling over 30,000 user entries per day, a typical issue during development was the occurrence of bugs. These bugs were often reported by our QA team, and the typical bug report included an order ID and a description of what was not functioning. This would then involve me looking through our database for the order id and joining multiple tables to identify what tasks had failed, from then I would go into the server to look through logs to find a root cause and start developing a solution.",
      "I recognized this process could be improved and save the time it took to investigate an issue so I could begin a solution quicker. I developed a tool that given an order ID it would show a report of the whole order. This report included the order information, all the process steps and showed if they were successful or not, along with a stack trace of the step that had failed.",
      "The tool I designed helped me identify quickly the issue when a bug was reported by QA. What I had not realized is this was a tool that the QA team could use themselves to help them understand issues and do the due diligence before writing a bug for the dev team.  As a result, I could now dive directly into solving the issues without spending unnecessary time trying to find the problem.",
      "I was very proud of this change because it was never something that was assigned to me. It was just something that I decided to build to improve a situation.",
    ],
  },
  {
    category: "Noticing a problem and fixing it",
    title: "Patch window vs job",
    told: true,
    story: [
      "While I was working in GM's DevOps support, the company had a monthly patching schedule for servers. Unfortunately, this monthly patching process would run the same time as one of our monthly jobs. So whenever the server was restarted during patching, it caused the job to fail. This would happen every month, causing problems in production and creating tickets.",
      "I realized this was an issue when my on-call support week landed on the day this patching happened.  I reached out to the team about the problem, thinking that a solution might have been explored previously.",
      "Surprisingly, team members acknowledged that this issue had been occurring and just shared the steps to correct our job from the failure. But nobody had taken the initiative to fix the root cause of the problem by changing the patch window.",
      "I understand how important having a stable system is, and how team metrics affect the team's performance. I decided to take matters into my own hands and fix the issue at the root cause. I investigated the company's process to get the patch window moved to not happen during our jobs.",
      "Once I changed the patch window the team no longer was seeing the specific failure, making the system more stable, and lowering the number of tickets assigned to our team. This was a simple fix that no one had bothered to do since fixing the job when it failed was simple.",
    ],
  },
  {
    category: "Being proactive",
    title: "Autosys to Tidal",
    told: true,
    story: [
      "While I was at GM, the company was going through a transition to a new scheduling tool, which required every team to move their existing scheduled jobs to the new platform. The company gave a generous timeline for this migration, so many teams opted to delay scheduling their upgrades.",
      "I noticed this was a significant leadership opportunity and the potential benefits of an early transition, I decided to proactively take on the challenge. I understood we had over 100 jobs, and that some of our jobs ran on a monthly basis, and converting them early would give me more time for testing.",
      "So I organized the jobs into manageable batches, making it easier to track progress and issues during migration. I made priority jobs that ran monthly to give me more opportunities to test.",
      "As part of this leadership role, I generated regular reports and shared them with the team on a weekly basis. These reports provided a clear overview of our progress and served as a reference for any on-call support team members.",
      "Working on this early had many advantages. It gave me time to address any issues or roadblock early. The proactive approach also meant we completed the transition ahead of schedule, making our team the first in our organization to fully migrate to the new scheduling tool.",
    ],
  },
  {
    category: "Bettering a process",
    title: "SA SAP ticket",
    told: true,
    story: [
      "While working at GM, I was a part of the on-call support rotation for my team. After several rotations, I noticed a recurring issue that would lead to late-night calls, sometimes as early as 3 am. This issue was caused by a missing import file from another team. When this happened, the on-call support person for our team would receive a call, and the solution involved contacting the on-call support person for the team responsible for sending the missing file.",
      "I realized this was an inconvenient issue that involved little effort on our team, so I decided to find a way where the issue did not involve a call and ticket to our team.",
      "I implemented a new job—a pre-check of the file's availability. This job would run before our scheduled job and see whether the necessary file was present. If the file was missing, the pre-check job would automatically generate a ticket and send it directly to the sourcing team that is responsible for the file. This eliminated the need for our team to get involved in any occurrence of the missing file.",
      "This had many positive outcomes. First it improved the time it took to fix the issue, since it no longer required an extra call to our team. Second, it reduced the number of support tickets assigned to our team, and third, It reduced the number of late-night calls for our team for a more peaceful on-call rotation.",
    ],
  },
  {
    category: "Documenting",
    title: "Deployment while on leave",
    told: true,
    story: [
      "While working at GM, I was the lead for a new feature in our demand and forecasting planning application. Being the lead I would handle all the deployment to our lower environments. Our deployment was very manual, involving updates to bash scripts, database modifications, and initial data loads.",
      "As we got closer to the production go-live date, I realized that it conflicted with my scheduled parental leave. I knew it was important to have a successful deployment, I took the initiative to ensure that my absence wouldn't impact the team's progress. To achieve this, I decided to create comprehensive step-by-step documentation outlining every aspect of the deployment process.",
      "This included all the deployment steps along with critical checks and rollback steps in case of any issues or failures happening during deployment. I also took the time to train other team members with lower environment deployments.",
      "When the time came for my parental leave, the rest of the team felt confident to be able to execute a production deployment using my documentation. It was good to know that the team was well-prepared to handle the project during my leave.",
      "When I returned to work after my leave, I was told that the deployment was a success and I got positive feedback from the team. They told me how helpful and crucial the step-by-step documentation had been to have a successful deployment. ",
    ],
  },
  {
    category: "Jr mentoring",
    title: "Mentor during layoffs",
    told: true,
    story: [
      "During my time at GM, we faced a challenging situation when the company decided to shut down our Arizona center, leading to everyone in the building to be laid off. Having experienced layoffs in the past, I understood what this meant and was relatively calm about the situation. However, for many of the junior developers on our team (5), this was their first job outside of college, and they were very nervous and unsure about how to handle this situation.",
      "While the company did provide resources for employees to help with their transition, these resources often generic advice to a large group of people. Recognizing the need for more personalized support, I decided to step in and offer my assistance to the junior developers.",
      "I offered to review their resumes and conduct mock interviews to help them prepare for their job search. This one-on-one support gave them specific feedback and guidance to each individual based on their unique skills and career goals. It also gave them the confidence and skills needed to present themselves effectively to potential employers.",
      "Through this mentoring initiative, I was able to make a meaningful impact on the junior developers' career transitions. Many of them expressed gratitude for the support and guidance I was able to provide during this challenging time. ",
    ],
  },
];

export const about =
  "I'm a software developer with about 8 years of experience and I've specialized in all layers of web development. My front-end experience involved building web pages with both Angular and React, but the majority of my experience is in the back-end building data retrieval tools. This includes RESTful API's and GraphQL API's. I've built these using the Object-Oriented Language C# and the .NET framework. With Back end experience comes working with Databases and I've worked with both SQL and NoSQL databases. I also have cloud experience with Azure, which I've used for hosting applications, storring application assets, authentication, and serverless solutions. This past year I've focused on a leadership role where I was the dev representation for the business team. This involved holding meeting to show progress and gather requirements and feedback. This role also involved working with DevOp tools used to plan the team's workload and setting up automations with CI/CD pipelines. I'm excited about this role with Oracle health and the company's focus on improving the healthcare experience for all, as it's a field I've personally had struggles with in the past. I believe with my experience and excitement to work on tools that are user facing I can be a great asset to help the company achieve their goals. ";
